#!/usr/bin/perl -w
#                              -*- Mode: Perl -*- 
# dvt-parse --- 
# Author           : Manoj Srivastava ( srivasta@glaurung.green-gryphon.com ) 
# Created On       : Fri Mar 29 14:28:14 2002
# Created On Node  : glaurung.green-gryphon.com
# Last Modified By : Manoj Srivastava
# Last Modified On : Thu Oct 14 18:28:32 2004
# Last Machine Used: glaurung.internal.golden-gryphon.com
# Update Count     : 31
# Status           : Unknown, Use with caution!
# HISTORY          : 
# Description      : 
# 
#  arch-tag: 9d33a353-c460-4f4f-88a4-24c4aa2cd1c8
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 

use strict;

require 5.005;
use Carp qw(carp croak);
use Fcntl ':flock';             # import LOCK_* constants
use Getopt::Long;

=head1 NAME

dvt-parse - From the work dir, parse the ballot and create a single line synopsis

=cut

=head1 SYNOPSIS

dvt-parse -c /path/to/config 

=cut

=head1 DESCRIPTION

This routine parses the body of the message (created by dvt-mime),
and creates output that the tally script can handle.

This routine parses the ballot, and writes out a compact, single line
representation of the choices. It also flags ballots that it can not
parse so that nacks can be sent out to the voter, detailing the
problems encountered while parsing.

Additionally, this script attempts to be idempotent. It is also
incremental, unless a force option is given, in which case it
re-parses previously parsed messages.

=cut

=head2 Internal Implementation

This utility pays attention to the configuration options Work_Dir,
Body_Dir, Tally_Dir, Nack_Dir, Msg_Suffix, Msg_Preffix, and Force, as
well as the Option names themselves.

=cut

sub parse_messages {
  my %params   = @_;
  die "Internal Error!" unless defined $params{'Configuration'};
  my $confref = $params{'Configuration'}->get_config_ref();
  my $dvt = $params{'Configuration'};
  my %Config = %{ $confref };

  my $workdir     = $Config{'Work_Dir'};
  my $bodydir     = $Config{'Body_Dir'};
  my $tallydir    = $Config{'Tally_Dir'};
  my $nackdir     = $Config{'Nack_Dir'};

  my $msg_suffix  = $Config{'Msg_Suffix'};
  my $msg_preffix = $Config{'Msg_Preffix'};
  my $force       = $Config{'Force'};

  my @valid_options = grep {m/^Option_\d+$/ && $Config{$_}; } sort keys %Config;
  my $maxchoices  = $#valid_options + 1;

  opendir(BODY, $bodydir) || die "can't opendir $workdir: $!";
  my @messages = grep { m/${msg_preffix}\d+\.${msg_suffix}$/ &&
                          -f  "$bodydir/$_" }   readdir(BODY);
  closedir(BODY);
  foreach my $msg (@messages ) {
    next if !$force && (-e "$tallydir/$msg" || -e "$nackdir/$msg");
    my $ret = open (MESSAGE, "$bodydir/$msg");
    if (!$ret) {
      $dvt->log_message($msg, "Could not open extractred message:$!");
      next;
    }
    my %rank = ();
    my $valid = 0;
    my $text;

    while (<MESSAGE>) {
      chomp;
      s/#.*$//o;
      next if /^\s*$/o;
      next unless /\[\s*(\d+)\s*\]\s*(Choice\s+(\d+):\s*(.*))$/;

      my $rank = $1;
      my $option = $2;
      my $candidate = $3;

      my $config_option = $Config{"Option_" . $candidate};
      # remove leading and trailing spaces
      $config_option =~ s/\s+$//;
      $config_option =~ s/^\s+//;
      #  Checking the whole damned line was creating too many false positives
      # Check the first word for each line in the ballot, and hope
      # ballots are going to be sufficiently different
      $config_option =~ s/^(\S+).*$/$1/;
      my $config_patt = "\Q$config_option\E";
      if ($option !~ m/$config_patt/) {
        $valid--;
        $valid--;
        #warn "DEBUG: ballot error!$msg \nmismatch:\n $option\n $config_option\n";
        $text .= "\nmismatch:\n $option\n $config_option\n";
      }


      if ($rank < 1 || $rank > $maxchoices) {
        $text .= "\n$_\n";
        $text .= "Rank has to be at least 1 [$rank]]\n" if $rank < 1;
        $text .= "Rank has to be less than the number of candidate\n"
          if $rank > $maxchoices;
        $text .= "The number of candidates =  $maxchoices. \n"
          if $rank > $maxchoices;
        $text .= "Your choice [$rank]\n"   if $rank > $maxchoices;
        $valid = -10 * $maxchoices;
        next;
      }
      if ($candidate < 1 || $candidate > $maxchoices) {
        $text .= "\n$_\n";
        $text .= "Malformed ballot line: No such choice [$candidate]\n";
        $valid = -10 * $maxchoices;
        next;
      }
      $valid++;
      $rank{ $candidate } = $rank;
    }
    close MESSAGE;
    if ($valid > 0) {
      my $tally = "V: ";
      for my $candidate (1 .. $maxchoices) {
        #$tally .= sprintf("%02d", $rank{ $candidate }) if defined $rank{ $candidate };
        $tally .= sprintf("%d", $rank{ $candidate }) if defined $rank{ $candidate };
        $tally .= '-'                            unless defined $rank{ $candidate };
      }
      $tally .= "\n";
      $ret = open (TALLY, ">$tallydir/$msg");
      if (!$ret) {
        $dvt->log_message($msg, "Could not open $tallydir/$msg:$!");
      }
      chmod 0660, "$tallydir/$msg";
      print TALLY $tally;
      close TALLY;
    } else {
      $dvt->log_message($msg, "Invalid ballot.\n");
      $dvt->log_message($msg, $text) if $text;
      $ret = open (NACK, ">>$nackdir/$msg");
      if (!$ret) {
        $dvt->log_message($msg, "Could not open $nackdir/$msg:$!");
      }
      chmod 0660, "$nackdir/$msg";
      print NACK "There was an error parsing your ballot.\n";
      print NACK "-=" x 35, "\n";
      print NACK $text if $text;
      print NACK "\nNo valid choices detected\n" unless $text;
      print NACK "-=" x 35, "\n\n";
      print NACK "Please correct the errors and revote.\n";
      close NACK;
    }
  }
}

use Devotee;
sub main {
  my $optdesc = Devotee->Optdesc();
  GetOptions (%$optdesc);
  my $dvt = Devotee->new(%::ConfOpts);
  $dvt->validate(%::ConfOpts) unless 
    defined $::ConfOpts{'Config File'} && -r $::ConfOpts{'Config File'};
  $dvt->lock_vote_dir();
  &parse_messages('Configuration' => $dvt);
  $dvt->unlock_vote_dir();
}

&main;

exit 0;


=head1 CAVEATS

This is very inchoate, at the moment, and needs testing.

=cut

=head1 BUGS

None Known so far.

=cut

=head1 AUTHOR

Manoj Srivastava <srivasta@debian.org>

=head1 COPYRIGHT AND LICENSE

This script is a part of the Devotee package, and is 

Copyright (c) 2002 Manoj Srivastava <srivasta@debian.org>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=cut



1;

__END__

