#!/usr/bin/perl -w
#                              -*- Mode: Perl -*- 
# dvt-ack --- 
# Author           : Manoj Srivastava ( srivasta@glaurung.green-gryphon.com ) 
# Created On       : Fri Mar 29 22:06:48 2002
# Created On Node  : glaurung.green-gryphon.com
# Last Modified By : Manoj Srivastava
# Last Modified On : Thu Dec 22 23:20:54 2005
# Last Machine Used: glaurung.internal.golden-gryphon.com
# Update Count     : 95
# Status           : Unknown, Use with caution!
# HISTORY          : 
# Description      : 
# 
#  arch-tag: d546be20-4c03-4a03-aab6-45881020d5e3
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 


use strict;
use Devotee;

require 5.005;
use Carp qw(carp croak);
use Getopt::Long;

use MIME::Entity;
use MIME::Parser;
use MIME::Decoder;
use MIME::Tools;
use MIME::Decoder::Binary;

use IO::Handle;
use GnuPG::Interface;
use DB_File;

=head1 NAME

dvt-ack - encrypt and mail a previously generated acknowledgement.

=cut

=head1 SYNOPSIS

dvt-ack -c /path/to/config 

=cut

=head1 DESCRIPTION

This routine encrypts and emails acknowledgements that had been
generated by dvt-gack.  The email address and the key used are the
canonical ones found in the LDAP database, making it harder to spoof a
vote, since the response is sent to the canonical address for the
voter.

Additionally, this script attempts to be idempotent. It is also
incremental, unless a force option is given, in which case it
re-sends previously sent messages.


=head2 Internal Implementation

This routine pays attention to configuration parameters Top_Dir,
Work_Dir, Tally_Dir, Ack_Dir, Sig_Dir, Temp_Dir, GPG_Keyring,
PGP_Keyring, SEC_Keyring, PUB_Keyring, Msg_Suffix, Msg_Preffix, Force,
and Pass_Word.

=cut

sub send_mail {
  my %params = @_;

  die "Required parameter 'Destination' missing" unless
    defined $params{'Destination'};
  die "Required parameter 'Subject' missing" unless
    defined $params{'Subject'};
  die "Required parameter 'Body' missing" unless
    defined $params{'Body'};
  die "Required parameter 'Message' missing" unless
    defined $params{'Message'};
  die "Required parameter 'Name' missing" unless
    defined $params{'Name'};
  die "Required parameter 'Email' missing" unless
    defined $params{'Email'};
  die "Required paramter 'Top Dir' missing" unless $params{'Top Dir'};


  my $sigdir     = $params{'Sig Dir'} if defined $params{'Sig Dir'};
  my $topdir     = $params{'Top Dir'} if defined $params{'Top Dir'};
  my $dvt        = $params{'Configuration'};

  my $msg = $params{'Message'};
  # Grab the keyid we stashed away before, while verifying the sig
  if (-r "$sigdir/$msg") {
    my $ret = open(KEYID, "$sigdir/$msg");
    if (!$ret) {
      $dvt->log_message($msg, "Error reading uid from $sigdir/$msg:$!");
      return 0;
    }
  } else {
    $dvt->log_message($msg, "No keyid found in $sigdir / $msg");
    return 0;
  }

  my $text=<<EOH;
From: $params{'Email'}
To: $params{'Destination'}
Reply-To: $params{'Email'}
Bcc: $params{'Email'}
Subject: $params{'Subject'}

$params{'Body'};

EOH
  ;
  open(MAIL, "| /usr/sbin/sendmail -t") || die "Cannot open sendmail";
  # open(MAIL, ">>Acks")                  || die "Cannot open sendmail";
  print MAIL $text;
  close(MAIL);
  return $text;
}


sub send_encrypted_mail {
  my %params = @_;

  die "Required parameter 'Destination' missing" unless
    defined $params{'Destination'};
  die "Required parameter 'Subject' missing" unless
    defined $params{'Subject'};
  die "Required parameter 'Body' missing" unless
    defined $params{'Body'};
  die "Required parameter 'Message' missing" unless
    defined $params{'Message'};
  die "Required parameter 'Name' missing" unless
    defined $params{'Name'};
  die "Required parameter 'Email' missing" unless
    defined $params{'Email'};

  die "Required paramter 'SEC Ring' missing" unless $params{'SEC Ring'};
  die "Required paramter 'PUB Ring' missing" unless $params{'PUB Ring'};
  die "Required paramter 'GPG Ring' missing" unless $params{'GPG Ring'};
  die "Required paramter 'PGP Ring' missing" unless $params{'PGP Ring'};
  die "Required paramter 'Top Dir' missing" unless $params{'Top Dir'};

  my $sigdir     = $params{'Sig Dir'} if defined $params{'Sig Dir'};
  my $topdir     = $params{'Top Dir'} if defined $params{'Top Dir'};

  my $secring    = $params{'SEC Ring'} if defined $params{'SEC Ring'};
  my $pubring    = $params{'PUB Ring'} if defined $params{'PUB Ring'};
  my $gpgring    = $params{'GPG Ring'} if defined $params{'GPG Ring'};
  my $pgpring    = $params{'PGP Ring'} if defined $params{'PGP Ring'};
  my $passphrase = $params{'Pass Word'} if defined $params{'Pass Word'};
  my $dvt        = $params{'Configuration'};


  my $msg = $params{'Message'};
  # Grab the keyid we stashed away before, while verifying the sig
  if (-r "$sigdir/$msg") {
    my $ret = open(KEYID, "$sigdir/$msg");
    if (!$ret) {
      $dvt->log_message($msg, "Error reading uid from $sigdir/$msg:$!");
      return 0;
    }
  } else {
    $dvt->log_message($msg, "No keyid found in $sigdir / $msg");
    return 0;
  }
  # Slurp in the key
  undef $/;
  my $keyid = <KEYID>;
  close KEYID;
  $/ = "\n";
  chomp $keyid;

  # Setup IO to talk to gpg
  my ( $input,   $output, $error, $status_fh)
    = ( IO::Handle->new(),
        IO::Handle->new(),
        IO::Handle->new(),
        IO::Handle->new()
      );
  my $handles = GnuPG::Handles->new( stdin      => $input,
                                     stdout     => $output,
                                     stderr     => $error,
                                     status     => $status_fh
                                   );

  my $gnupg = GnuPG::Interface->new();

  my @gpg_args = ("--no-default-keyring", "--always-trust");
  push (@gpg_args, "--keyring", "$gpgring") if  $gpgring;
  push (@gpg_args, "--keyring", "$pgpring") if  $pgpring;
  push (@gpg_args, "--keyring", "$pubring") if  $pubring;
  push (@gpg_args, "--secret-keyring", "$secring") if  $secring;

  $gnupg->options->hash_init( 'no_options' => 1,
                              'armor'   => 1,
                              'homedir' => $topdir,
                              'recipients' => ['0x' . $keyid ],
                              'meta_interactive' => 0,
                              "verbose" => 1,
                              "always_trust" => 1,
                              'extra_args' => [ @gpg_args ]
                            );
  # indicate our pasphrase through the convience method
  $gnupg->passphrase( $passphrase );

  my $pid = $gnupg->sign_and_encrypt( handles => $handles);
  #       my $pid = $gnupg->wrap_call (
  #                 handles => $handles,
  #                       commands     => [ qw( --sign --encrypt ) ]
  #               );

  # this closes the communication channel,
  # indicating we are done
  print $input $params{'Body'};
  close $input;
  
  # now we read the output
  my @output = <$output>;       # reading the output
  my @errors = <$error>;        # reading the error
  my @status = <$status_fh>;    # read the status info
  
  # clean up...
  close $output;
  close $error;
  close $status_fh;

  waitpid $pid, 0;              # clean up the finished GnuPG process

  my $body = join ('', @output) if @output;
  if (! $body) {
    $dvt->log_message($msg, "Error encrypting message.\n@errors\n@status\n");
    return 0;
  }

  # RFC 3156    
  #  4.  OpenPGP encrypted data

  my $text=<<EOH;
From: $params{'Email'}
To: $params{'Destination'}
Reply-To: $params{'Email'}
Bcc: $params{'Email'}
Subject: $params{'Subject'}
Mime-Version: 1.0
Content-Type: multipart/encrypted; protocol="application/pgp-encrypted";
        boundary=xx-63ff3786-ec44-48df-ac1c-354c05e07bba-xx


--xx-63ff3786-ec44-48df-ac1c-354c05e07bba-xx
Content-Type: application/pgp-encrypted

Version: 1

--xx-63ff3786-ec44-48df-ac1c-354c05e07bba-xx
Content-Type: application/octet-stream

$body

--xx-63ff3786-ec44-48df-ac1c-354c05e07bba-xx--

EOH
  ;
  open(MAIL, "| /usr/sbin/sendmail -t") || die "Cannot open sendmail";
  # open(MAIL, ">>Acks")                  || die "Cannot open sendmail";
  print MAIL $text;
  close(MAIL);
  return $text;
}


sub send_ack {

  my %params   = @_;
  die "Internal Error!" unless defined $params{'Configuration'};
  my $confref = $params{'Configuration'}->get_config_ref();
  my $dvt = $params{'Configuration'};
  my %Config = %{ $confref };

  my $topdir      = $Config{'Top_Dir'};
  my $workdir     = $Config{'Work_Dir'};
  my $ackdir      = $Config{'Ack_Dir'};
  my $sigdir      = $Config{'Sig_Dir'};
  my $tmpdir      = $Config{'Temp_Dir'};

  my $gpgring     = $Config{'GPG_Keyring'}
    if defined $Config{'GPG_Keyring'};
  my $pgpring     = $Config{'PGP_Keyring'}
    if defined $Config{'PGP_Keyring'};
  my $secring     = $Config{'SEC_Keyring'}
    if defined $Config{'SEC_Keyring'};
  my $pubring     = $Config{'PUB_Keyring'}
    if defined $Config{'PUB_Keyring'};

  my $msg_suffix  = $Config{'Msg_Suffix'};
  my $msg_preffix = $Config{'Msg_Preffix'};
  my $force       = $Config{'Force'};

  my $passphrase = $Config{"Pass_Word"} if $Config{"Pass_Word"};


  opendir(ACKS, $ackdir) || die "can't opendir $ackdir: $!";
  my @messages = grep { m/${msg_preffix}\d+\.${msg_suffix}$/ &&
                          -f  "$workdir/$_" }   readdir(ACKS);
  closedir(ACKS);

  foreach my $msg (sort @messages) {
    my $msg_base = $msg;
    $msg_base =~ s/\.$msg_suffix$//o;
    next if !$force && -e "$ackdir/$msg_base.sent";

    my $ret = open(TEXT, "$ackdir/$msg");
    if (!$ret) {
      $dvt->log_message($msg, "Error reading body from $ackdir/$msg:$!");
      next;
    }
    undef $/;
    my $body = <TEXT>;
    close TEXT;
    $/ = "\n";
    if (!$body || $body =~ /^\s*$/) {
      $dvt->log_message($msg, "No body found in  $ackdir/$msg:$!");
      next;
    }

    my $parser = new MIME::Parser;
    $parser->output_dir("$tmpdir");
    $parser->output_to_core(0);
    my $entity;
    eval {$entity = $parser->parse_open("$workdir/$msg"); };
    if ($@) {
      $dvt->log_message($msg, "Could not parse message $msg");
      next;
    }
    my $head        = $entity->head;
    my $from        = $head->get('From');
    my $replyto     = $head->get('Reply-To');

    chomp($from)          if $from;
    chomp($replyto)       if $replyto;
    if ($replyto) {
      $from = $replyto;
    }

    my $subject = "Acknowledgement for your vote";
    if ($Config{"Encrypted_Ack"}) {
      $ret = &send_encrypted_mail('Destination'   => "$from",
                                  'Subject'       => "$subject",
                                  'Body'          => "$body",
                                  'Message'       => "$msg",
                                  'Sig Dir'       => "$sigdir",
                                  'Top Dir'       => "$topdir",
                                  'SEC Ring'      => "$secring",
                                  'PUB Ring'      => "$pubring",
                                  'GPG Ring'      => "$gpgring",
                                  'PGP Ring'      => "$pgpring",
                                  'Pass Word'     => "$passphrase",
                                  'Name'          => $Config{"Vote_Taker_Name"},
                                  'Email'         => $Config{"Vote_Taker_EMAIL"},
                                  'Configuration' => $dvt
                                 );
    }
    else {
      $ret = &send_mail('Destination'   => "$from",
                        'Subject'       => "$subject",
                        'Body'          => "$body",
                        'Message'       => "$msg",
                        'Sig Dir'       => "$sigdir",
                        'Top Dir'       => "$topdir",
                        'Name'          => $Config{"Vote_Taker_Name"},
                        'Email'         => $Config{"Vote_Taker_EMAIL"},
                        'Configuration' => $dvt
                       );
    }
    $ret = &send_encrypted_mail('Destination'   => "$from",
                                'Subject'       => "$subject",
                                'Body'          => "$body",
                                'Message'       => "$msg",
                                'Sig Dir'       => "$sigdir",
                                'Top Dir'       => "$topdir",
                                'SEC Ring'      => "$secring",
                                'PUB Ring'      => "$pubring",
                                'GPG Ring'      => "$gpgring",
                                'PGP Ring'      => "$pgpring",
                                'Pass Word'     => "$passphrase",
                                'Name'          => $Config{"Vote_Taker_Name"},
                                'Email'         => $Config{"Vote_Taker_EMAIL"},
                                'Configuration' => $dvt
                               );
    if (!$ret) {
      $dvt->log_message($msg, "Error sending mail");
      next;
    }
    my $ret1 = open(SENT, ">>$ackdir/$msg_base.sent");
    if (!$ret1) {
      $dvt->log_message($msg, 
                        "Error logging mesage $ackdir/$msg_base.sent:$!");
      next;
    }
    chmod $Config{'File_Mask'}, "$ackdir/$msg_base.sent";
    my $now_string = gmtime;
    print SENT "Sent ACK to $from at $now_string\n";
    print SENT "\n\n$ret\n\n";
    close SENT;
  }

}

sub main {
  my $optdesc = Devotee->Optdesc();
  GetOptions (%$optdesc);
  my $dvt = Devotee->new(%::ConfOpts);
  $dvt->validate(%::ConfOpts) unless 
    defined $::ConfOpts{'Config File'} && -r $::ConfOpts{'Config File'};
  $dvt->lock_vote_dir();
  &send_ack('Configuration' => $dvt);
  $dvt->unlock_vote_dir();
}

&main;

exit 0;

=head1 CAVEATS

This is very inchoate, at the moment, and needs testing.

=cut

=head1 BUGS

None Known so far.

=cut

=head1 AUTHOR

Manoj Srivastava <srivasta@debian.org>

=head1 COPYRIGHT AND LICENSE

This script is a part of the Devotee package, and is 

Copyright (c) 2002 Manoj Srivastava <srivasta@debian.org>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=cut



1;

__END__

