#!/usr/bin/perl -w
#                              -*- Mode: Perl -*-
# dvt-gpg ---
# Author           : Manoj Srivastava ( srivasta@glaurung.green-gryphon.com )
# Created On       : Wed Mar 27 19:44:05 2002
# Created On Node  : glaurung.green-gryphon.com
# Last Modified By : Manoj Srivastava
# Last Modified On : Fri Apr  7 12:21:00 2006
# Last Machine Used: glaurung.internal.golden-gryphon.com
# Update Count     : 132
# Status           : Unknown, Use with caution!
# HISTORY          :
# Description      :
#
# arch-tag: 12cda853-b4a2-4a23-bac9-abd3033c752f
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#


use strict;

require 5.005;
use Carp qw(carp croak);
use Fcntl ':flock';             # import LOCK_* constants
use Getopt::Long;

use IO::Handle;
use IO::Select;
use GnuPG::Interface;
use DB_File;

use MIME::Entity;
use MIME::Parser;
use MIME::Decoder;
use MIME::Tools;
use MIME::Decoder::Binary;


=head1 NAME

dvt-gpg - verify digital signatures on the ballot

=cut

=head1 SYNOPSIS

dvt-gpg -c /path/to/config 

=cut



=head1 DESCRIPTION

This routine is designed to verify a gpg signature, given a file, and
optionally a detached signature file. It also maintains a database of
sig ids to prevent a replay attack. This is the fourth step of ballot
processing.

This is the where we take the files created by C<dvt-mime> and
verify the cryptographic signature against the provided keyring. For
each file in the work directory produced by dvt-mime, it checks the
signatures against the keyrings configured.  This utility handles both
PGP/MIME signed messages, as well as the text/plain ascii armored
signed messages.  When handling PGP/MIME messages, if it fails to
validate the signature with the body with CRLF line endings, it tries
to validate against an alternate version of the body where the line
ending is the normal unix newline; since some MUAs incorrectly
generate the signature without normalizing the line endings.

Additionally, this script attempts to be idempotent. It is also
incremental, unless a force option is given, in which case it
cleans out the replay database, and runs gpg all over again.

=head2 Internal Implementation

This script pays attention to the configuration parameters Top_Dir,
Body_Dir, Check_Dir, Nack_Dir, Sig_Dir, Msg_Suffix, Msg_Preffix,
Force, Body_Suffix, GPG_Keyring, PGP_Keyring, SEC_Keyring,
PUB_Keyring, Replay_DB, and Sig_Suffix.

=cut

sub invoke_gpg {
  my %params   = @_;
  my $cmd_ref  = $params{'Command Args'};
  my $args_ref = $params{'GnuPG Args'};
  my $action   = $params{'GnuPG Cmd'};
  die "Internal Error!" unless defined $params{'Configuration'};
  my $confref = $params{'Configuration'}->get_config_ref();
  my $dvt = $params{'Configuration'};
  my %Config = %{ $confref };
  my $topdir      = $Config{'Top_Dir'};

  my ( $input_fh,   $output_fh, $error_fh, $status_fh )
    = ( IO::Handle->new(),
        IO::Handle->new(),
        IO::Handle->new(),
        IO::Handle->new()
      );

  my $handles = GnuPG::Handles->new(
                                    stdin      => $input_fh,
                                    stdout     => $output_fh,
                                    stderr     => $error_fh,
                                    status     => $status_fh,
                                   );
  my $gnupg = GnuPG::Interface->new();

  $gnupg->options->hash_init( 'no_options' => 1,
                              'armor'   => 1,
                              'homedir' => $topdir,
                              'meta_interactive' => 0,
                              'rfc1991' => 1,
                              'extra_args' => [ @$args_ref ]
                            );
  my $pid;
  if ($action =~ m/Verify/i) {
    $pid = $gnupg->verify( handles      => $handles,
                           command_args => $cmd_ref);
  } elsif ($action =~ m/decrypt/i) {
    # indicate our pasphrase through the convience method
    $gnupg->passphrase ($params{'PassPhrase'});
    $pid = $gnupg->decrypt( handles      => $handles,
                            command_args => $cmd_ref);

#     my $cipher_file = IO::File->new($params{'Input File'});
#     my $sin    = IO::Select->new();
#     $sin->add($input_fh);
#     if ($sin->can_write()) {
#       print $input_fh $_ while <$cipher_file>;
#     }
  } elsif ($action =~ m/encrypt/i) {
    $gnupg->passphrase ($params{'PassPhrase'});
    $pid = $gnupg->encrypt( handles      => $handles);

    my $sin    = IO::Select->new();
    $sin->add($input_fh);
    if ($sin->can_write()) {
      print $input_fh $params{'Body'};
    }
  } elsif ($action =~ m/get key/i) {
    $pid = $gnupg->recv_keys( handles      => $handles,
                              command_args => @$cmd_ref);
  } elsif ($action =~ m/list key/i) {
    $pid = $gnupg->list_public_keys( handles      => $handles,
                                     command_args => @$cmd_ref);
  }
  # this closes the communication channel,
  # indicating we are done
  close $input_fh;

  # now we read the output
  my ( $stdout, $stderr, $status ) = ( "", "", "" );
  my $readyr;
 
  my $sout   = IO::Select->new();
  $sout->add($output_fh);
  $sout->add($error_fh);
  $sout->add($status_fh);
  while ($sout->count() > 0) {
    ( $readyr, undef, undef ) = 
      IO::Select::select( $sout, undef, undef);
    foreach my $descriptor (@$readyr) {
      if ($descriptor->eof) {
        $sout->remove($descriptor);
        close $descriptor;
        next;
      }
      if ( $descriptor == $output_fh ) {
        $stdout .= <$output_fh>;
        next;
      }
      if ( $descriptor == $status_fh ) {
        $status .= <$descriptor>;
        next;
      }
      if ( $descriptor == $error_fh ) {
        $stderr .= <$descriptor>;
        next;
      }
    }
  }
  waitpid $pid, 0;        # clean up the finished GnuPG process
  # warn "DEBUG: ACTION: $action";
  # warn "DEBUG: STDOUT: $stdout";
  # warn "DEBUG: STDERR: $stderr";
  # warn "DEBUG: STATUS: $status";
  return ( $stdout, $stderr, $status );
}


=head3 verify_messages

This routine is the heart of the gpg signature checks done by the
voting machinery.

=cut


sub verify_messages {
  my %params   = @_;
  die "Internal Error!" unless defined $params{'Configuration'};
  my $confref = $params{'Configuration'}->get_config_ref();
  my $dvt = $params{'Configuration'};
  my %Config = %{ $confref };


  my $topdir      = $Config{'Top_Dir'};
  my $bodydir     = $Config{'Body_Dir'};
  my $checkdir    = $Config{"Check_Dir"};
  my $nackdir     = $Config{"Nack_Dir"};
  my $sigdir      = $Config{"Sig_Dir"};
  my $tmpdir      = $Config{'Temp_Dir'};

  my $msg_suffix  = $Config{'Msg_Suffix'};
  my $msg_preffix = $Config{'Msg_Preffix'};
  my $force       = $Config{'Force'};
  my $body_suffix = $Config{'Body_Suffix'};

  my $gpgring     = $Config{'GPG_Keyring'}
    if defined $Config{'GPG_Keyring'};
  my $pgpring     = $Config{'PGP_Keyring'}
    if defined $Config{'PGP_Keyring'};
  my $secring     = $Config{'SEC_Keyring'}
    if defined $Config{'SEC_Keyring'};
  my $pubring     = $Config{'PUB_Keyring'}
    if defined $Config{'PUB_Keyring'};

  my $replaydb          = $Config{"Replay_DB"};
  my $sig_suffix        = $Config{"Sig_Suffix"};
  my $encrypted_suffix  = $Config{"Encrypted_Suffix"};


  if ($force && -e $replaydb) {
    unlink $replaydb;
  }

  my %Replay;
  my $replay_ref = tie %Replay, 'DB_File', $replaydb, O_RDWR|O_CREAT, $Config{"File_Mask"},
    $DB_HASH or die "Cannot open file $replaydb: $!\n" ;


  opendir(BODY, $bodydir) || die "can't opendir $bodydir: $!";
  my @files     = grep { -f "$bodydir/$_" }  readdir(BODY);
  my @messages  = grep { m/${msg_preffix}\d+\.${body_suffix}$/ }       @files;
  my @encrypted = grep { m/${msg_preffix}\d+\.${encrypted_suffix}$/ }  @files;
  closedir(BODY);
  my $msg       ;


  foreach $msg (sort @messages) {
    my $msg_base = $msg;
    my $msg_sig = $msg;
    $msg_base =~ s/\.$body_suffix$//o;
    $msg_sig  =~ s/$body_suffix$/$sig_suffix/o;
    if ($force ) {
      unlink "$checkdir/$msg_base.$msg_suffix" if
        -e "$checkdir/$msg_base.$msg_suffix";
    } else {
      next if (-e "$checkdir/$msg_base.$msg_suffix" ||
               -e "$nackdir/$msg_base.$msg_suffix") ;
    }


    my @gpg_args = ("--always-trust");
    push (@gpg_args, "--keyring", "$gpgring") if  $gpgring;
    push (@gpg_args, "--keyring", "$pgpring") if  $pgpring;

    my $command_args;

    if (-r "$bodydir/$msg_sig") {
      $command_args = [ "--verify",
                        "$bodydir/$msg_sig",
                        "$bodydir/$msg",
                      ];
    } else {
      $command_args = [ "--verify", "$bodydir/$msg"];
    }

    my ( $stdout, $stderr, $status ) = ("", "", "");
    ($stdout, $stderr, $status) =
      invoke_gpg(
                 'Configuration' => $dvt,
                 'GnuPG Args' => \@gpg_args,
                 'GnuPG Cmd'  => 'Verify',
                 'Command Args' => $command_args
                );
    # now we read the output
    my @output = split /\n/, $stdout; # reading the output
    my @result = split /\n/, $stderr; # reading the error
    my @status = split /\n/, $status; # read the status info

    my $text;
    $dvt->log_message($msg . ".good", $status);
    my @goodsig=();
    @goodsig=grep {m/GOODSIG/} @status;
    if (scalar(@goodsig)) {
      my $fingerprint;
      my $date;
      my $timestamp;
      my $radix;
      my $keyid;
      my $username;
      my $subkey;
      for (@status) {
        # Newer GPG versions have extended subkey and expiry data
        if (m/^\s*\[GNUPG:\]\s+VALIDSIG
              \s+(\S+)  #  <fingerprint in hex>
              \s+(\S+)       # <sig_creation_date>
               \s+(\S+)       # <sig-timestamp>
                \s+\S+ # <expire-timestamp>
                 \s+\S+ # <sig-version>
                 \s+\S+ # <reserved>
                 \s+\S+ # <pubkey-algo>
                 \s+\S+ # <hash-algo>
                 \s+\S+ # <sig-class>
                 \s+(\S+)       # <primary-key-fpr>
                 \s*$
                 /x) {
          ($subkey, $date, $timestamp, $fingerprint) = ($1, $2, $3, $4);
        } elsif (m/^\s*\[GNUPG:\] VALIDSIG\s+(\S+)\s+(\S+)\s+(\S+)/) {
          ($fingerprint, $date, $timestamp) = ($1, $2, $3);
        } elsif (m/^\s*\[GNUPG:\] SIG_ID\s+(\S+)\s+(\S+)\s+(\S+)/) {
          ($radix, $date, $timestamp) = ($1, $2, $3);
        } elsif (m/^\s*\[GNUPG:\] GOODSIG\s+(\S+)\s+(.+)$/) {
          ($keyid, $username) = ($1, $2);
        }
      }
      $text = join "\n", grep { m/^\s*gpg:/ } @result;
      $text   .= "Key finger print: $fingerprint\n";
      $text   .= "Signature ID: $radix\n";
      if (defined $Replay{"$radix"}) {
        open(NACK, ">>$nackdir/$msg_base.$msg_suffix") ||
          die "Could not open $nackdir/$msg_base.$msg_suffix:$!";
        chmod $Config{"File_Mask"}, "$nackdir/$msg_base.$msg_suffix";
        print NACK "The signature on the message, though valid, has been\n";
        print NACK "seen before.  This could be a potential replay attack\n";
        print NACK "-=" x 35;
        print NACK "\n";
        print NACK $text;
        print NACK "-=" x 35;
        print NACK "\n\n";
        print NACK "\tThis ballot is being rejected, please vote again.\n\n";
        close NACK;
        $dvt->log_message($msg, $text);
      }
      else {
        $Replay{"$radix"} = $text;
        if ($fingerprint =~ /^\s*$/g || $keyid =~ /^\s*$/g) {
          # Failure.
          $text = "There was a problem verifying the signature on the ballot.\n";
          $text   .=  "GPG did not return a fingerprint or key id\n";
          $text   .=  "-=" x 35;
          $text   .= "\n";
          $text   .= join "\n", grep { m/^\s*gpg:/ } @result;
          $text   .= "\n";
          $text   .= join "", @status;
          $text   .=  "-=" x 35;
          $text   .= "\n\n";
          open(NACK, ">>$nackdir/$msg_base.$msg_suffix") ||
            die "Could not open $nackdir/$msg_base.$msg_suffix:$!";
          chmod $Config{"File_Mask"}, "$nackdir/$msg_base.$msg_suffix";
          print NACK $text;
          print NACK "\tThis ballot is being rejected.\n\n";
          close NACK;
          $dvt->log_message($msg, $text);
        }
        else {
          open(GOOD, ">>$checkdir/$msg_base.$msg_suffix") ||
            die "Could not open $checkdir/$msg_base.$msg_suffix:$!";
          chmod $Config{"File_Mask"}, "$checkdir/$msg_base.$msg_suffix";
          print GOOD $fingerprint, "\n";
          close GOOD;
          open(SIG, ">>$sigdir/$msg_base.$msg_suffix") ||
            die "Could not open $checkdir/$msg_base.$msg_suffix:$!";
          chmod $Config{"File_Mask"}, "$sigdir/$msg_base.$msg_suffix";
          print SIG $keyid, "\n";
          close SIG;
        }
      }
    }
    elsif (-r "$bodydir/$msg.crlf") {
      # OK, we have a mangled line ending version of the data
      # This should normally not be accepted, since RFCs 1521 and 3156
      # are pretty clear about this, but we have traditionally
      # supported broken MUAs.
      # Let us see if the sig was made over lines that
      # end in \bn, rather than \r\n as it should be.
      my $command_args;

      if (-r "$bodydir/$msg_sig") {
        $command_args = [ "--verify",
                          "$bodydir/$msg_sig",
                          "$bodydir/$msg.crlf",
                        ];
      } else {
        $command_args = [ "--verify", "$bodydir/$msg.crlf"];
      }

      my ( $stdout, $stderr, $status ) = ("", "", "");
      ($stdout, $stderr, $status) =
        invoke_gpg(
                   'Configuration' => $dvt,
                   'GnuPG Args' => \@gpg_args,
                   'GnuPG Cmd'  => 'Verify',
                   'Command Args' => $command_args
                  );
      # now we read the output
      my @output = split /\n/, $stdout; # reading the output
      my @result = split /\n/, $stderr; # reading the error
      my @status = split /\n/, $status; # read the status info

      $dvt->log_message($msg . ".good", $status);
      @goodsig=();
      @goodsig=grep {m/GOODSIG/} @status;
      if (scalar(@goodsig)) {
        my $fingerprint;
        my $date;
        my $timestamp;
        my $radix;
        my $keyid;
        my $username;
        my $subkey;
        for (@status) {
          # Newer GPG versions have extended subkey and expiry data
          if (m/^\s*\[GNUPG:\]\s+VALIDSIG
                \s+(\S+)  #  <fingerprint in hex>
                \s+(\S+)       # <sig_creation_date>
                 \s+(\S+)       # <sig-timestamp>
                  \s+\S+ # <expire-timestamp>
                   \s+\S+ # <sig-version>
                    \s+\S+ # <reserved>
                     \s+\S+ # <pubkey-algo>
                      \s+\S+ # <hash-algo>
                       \s+\S+ # <sig-class>
                        \s+(\S+)       # <primary-key-fpr>
                         \s*$
                          /x) {
            ($subkey, $date, $timestamp, $fingerprint) = ($1, $2, $3, $4);
          } elsif (m/^\s*\[GNUPG:\] VALIDSIG\s+(\S+)\s+(\S+)\s+(\S+)/) {
            ($fingerprint, $date, $timestamp) = ($1, $2, $3);
          } elsif (m/^\s*\[GNUPG:\] SIG_ID\s+(\S+)\s+(\S+)\s+(\S+)/) {
            ($radix, $date, $timestamp) = ($1, $2, $3);
          } elsif (m/^\s*\[GNUPG:\] GOODSIG\s+(\S+)\s+(.+)$/) {
            ($keyid, $username) = ($1, $2);
          }
        }
        # We know that this message has appeared before in the
        # replaydb, so no point in checking.
        if ($fingerprint =~ /^\s*$/g || $keyid =~ /^\s*$/g) {
          # Failure.
          $text = "There was a problem verifying the signature on the ballot.\n";
          $text   .=  "GPG did not return a fingerprint or key id\n";
          $text   .=  "-=" x 35;
          $text   .= "\n";
          $text   .= join "\n", grep { m/^\s*gpg:/ } @result;
          $text   .= "\n";
          $text   .= join "", @status;
          $text   .=  "-=" x 35;
          $text   .= "\n\n";
          open(NACK, ">>$nackdir/$msg_base.$msg_suffix") ||
            die "Could not open $nackdir/$msg_base.$msg_suffix:$!";
          chmod $Config{"File_Mask"}, "$nackdir/$msg_base.$msg_suffix";
          print NACK $text;
          print NACK "\tThis ballot is being rejected.\n\n";
          close NACK;
          $dvt->log_message($msg, $text);
        }
        else {
          open(GOOD, ">>$checkdir/$msg_base.$msg_suffix") ||
            die "Could not open $checkdir/$msg_base.$msg_suffix:$!";
          chmod $Config{"File_Mask"}, "$checkdir/$msg_base.$msg_suffix";
          print GOOD $fingerprint, "\n";
          close GOOD;
          open(SIG, ">>$sigdir/$msg_base.$msg_suffix") ||
            die "Could not open $checkdir/$msg_base.$msg_suffix:$!";
          chmod $Config{"File_Mask"}, "$sigdir/$msg_base.$msg_suffix";
          print SIG $keyid, "\n";
          close SIG;
          # record the fact that we succeeded on a line-ending mangled version.
          $dvt->log_message($msg . ".crlferr", 
                            "Matched message with \\n line endings\n");
        }
      }
      else {
        # Failure.
        $text    = "There was a problem verifying the signature on the ballot.\n";
        $text   .= "I even tried compensating for alternate CR/LF handling, to no avail.\n";
        $text   .=  "-=" x 35;
        $text   .= "\n";
        $text   .= join "\n", grep { m/^\s*gpg:/ } @result;
        $text   .= "\n";
        $text   .= join "", @status;
        $text   .=  "-=" x 35;
        $text   .= "\n\n";
        open(NACK, ">>$nackdir/$msg_base.$msg_suffix") ||
          die "Could not open $nackdir/$msg_base.$msg_suffix:$!";
        chmod $Config{"File_Mask"}, "$nackdir/$msg_base.$msg_suffix";
        print NACK $text;
        print NACK "\tThis ballot is being rejected.\n\n";
        close NACK;
        $dvt->log_message($msg, $text);
      }
    }
    else {
      # Failure.
      $text = "There was a problem verifying the signature on the ballot.\n";
      $text   .=  "-=" x 35;
      $text   .= "\n";
      $text   .= join "\n", grep { m/^\s*gpg:/ } @result;
      $text   .= "\n";
      $text   .= "STATUS:\n";
      $text   .= join "", @status;
      $text   .=  "-=" x 35;
      $text   .= "\n\n";
      open(NACK, ">>$nackdir/$msg_base.$msg_suffix") ||
        die "Could not open $nackdir/$msg_base.$msg_suffix:$!";
      chmod $Config{"File_Mask"}, "$nackdir/$msg_base.$msg_suffix";
      print NACK $text;
      print NACK "\tThis ballot is being rejected.\n\n";
      close NACK;
      $dvt->log_message($msg, $text);
    }
  }
  foreach $msg (sort @encrypted) {
    my $msg_base = $msg;
    $msg_base =~ s/\.$encrypted_suffix$//o;
    if ($force ) {
      unlink "$checkdir/$msg_base.$msg_suffix" if
        -e "$checkdir/$msg_base.$msg_suffix";
      unlink "$bodydir/$msg_base.$body_suffix" if
        -e "$bodydir/$msg_base.$body_suffix";
    }
    else {
      next if (-e "$checkdir/$msg_base.$msg_suffix" ||
               -e "$nackdir/$msg_base.$msg_suffix"  ||
               -e "$bodydir/$msg_base.$body_suffix" ) ;
    }
    my @gpg_args = ("--always-trust");
    push (@gpg_args, "--keyring", "$gpgring") if  $gpgring;
    push (@gpg_args, "--keyring", "$pgpring") if  $pgpring;

    my ( $stdout, $stderr, $status ) = ("", "", "");
    ($stdout, $stderr, $status) =
      invoke_gpg(
                 'Configuration' => $dvt,
                 'PassPhrase'    => "$Config{Pass_Word}",
                 'GnuPG Args' => \@gpg_args,
                 'GnuPG Cmd'  => 'Decrypt',
                 'Command Args' => [ "--output",
                                     "$bodydir/$msg_base.${body_suffix}",
                                     "--decrypt",
                                     "$bodydir/$msg"
                                   ]
                );
    # now we read the output
    my @output = split /\n/, $stdout; # reading the output
    my @result = split /\n/, $stderr; # reading the error
    my @status = split /\n/, $status; # read the status info
    #warn "DEBUG:OUT $stdout";
    #warn "DEBUG:ERR $stderr";
    #warn "DEBUG:STT $status";
    my $text;
    $dvt->log_message($msg . ".good", $status);
    my @decrypt_failed=();
    @decrypt_failed=grep {m/DECRYPTION_FAILED/} @status;
    if (! scalar(@decrypt_failed)) {
      my $fingerprint;
      my $date;
      my $timestamp;
      my $radix;
      my $keyid;
      my $username;
      my $subkey;
      for (@status) {
        # Newer GPG versions have extended subkey and expiry data
        if (m/^\s*\[GNUPG:\]\s+VALIDSIG
            \s+(\S+)            #  <fingerprint in hex>
            \s+(\S+)            # <sig_creation_date>
            \s+(\S+)            # <sig-timestamp>
            \s+\S+              # <expire-timestamp>
            \s+\S+              # <sig-version>
            \s+\S+              # <reserved>
            \s+\S+              # <pubkey-algo>
            \s+\S+              # <hash-algo>
            \s+\S+              # <sig-class>
            \s+(\S+)            # <primary-key-fpr>
            \s*$
            /x) {
          ($subkey, $date, $timestamp, $fingerprint) = ($1, $2, $3, $4);
        } elsif (m/^\s*\[GNUPG:\] VALIDSIG\s+(\S+)\s+(\S+)\s+(\S+)/) {
          ($fingerprint, $date, $timestamp) = ($1, $2, $3);
        } elsif (m/^\s*\[GNUPG:\] SIG_ID\s+(\S+)\s+(\S+)\s+(\S+)/) {
          ($radix, $date, $timestamp) = ($1, $2, $3);
        } elsif (m/^\s*\[GNUPG:\] GOODSIG\s+(\S+)\s+(.+)$/) {
          ($keyid, $username) = ($1, $2);
        }
      }
      $text = join "\n", grep { m/^\s*gpg:/ } @result;
      $text   .= "Key finger print: ";
      $text   .= "$fingerprint\n" if $fingerprint;
      $text   .= "Signature ID: " ;
      $text   .= "$radix\n" if $radix;
      if ($radix && defined $Replay{"$radix"}) {
        open(NACK, ">>$nackdir/$msg_base.$msg_suffix") ||
          die "Could not open $nackdir/$msg_base.$msg_suffix:$!";
        chmod $Config{"File_Mask"}, "$nackdir/$msg_base.$msg_suffix";
        print NACK "The signature on the message, though valid, has been\n";
        print NACK "seen before.  This could be a potential replay attack\n";
        print NACK "-=" x 35;
        print NACK "\n";
        print NACK $text;
        print NACK "-=" x 35;
        print NACK "\n\n";
        print NACK "\tThis ballot is being rejected, please vote again.\n\n";
        close NACK;
        $dvt->log_message($msg, $text);
      }
      else {
        $Replay{"$radix"} = $text if $radix;
        if ((! $fingerprint || $fingerprint =~ /^\s*$/g) ||
            (! $keyid       || $keyid =~ /^\s*$/g)) {
          # Failure. We know decryption succeeded, so perhaps it uses
          # RFC 1847 Encapsulation. "$bodydir/$msg_base.${body_suffix}"
          # contains the message that can be the signed bit.
          my $parser = new MIME::Parser;
          $parser->output_dir("$tmpdir");
          $parser->output_to_core(0);

          my $entity;

          my $failed='';
          eval {$entity = $parser->parse_open("$bodydir/$msg_base.${body_suffix}"); };
          if ($@) {
            $failed = "$@";
          }
          else {
            # OK, so we have a parsed entity
            my $num_parts = $entity->parts;
            if ($num_parts == 2) {
              my $data = $entity->parts(0)->as_string;

	      if ($data =~ m/[^\r]\n/o) {
		# Bah. Non RFC compliant line ending. Stupid MIME::Parser
		# Save anyway since some broken MUA's depend on this
		# This should go away as we fix the mailers
		my $ret = open(DATA, ">$bodydir/$msg_base.${body_suffix}.inner.crlf");
		chmod $Config{"File_Mask"}, "$bodydir/$msg_base.${body_suffix}.inner.crlf";
		print DATA $data;
		close(DATA);
		# Fix the data for the real file
		$data =~ s/\r?\n/\r\n/g;
	      }

              my $ret = open(DATA, ">$bodydir/$msg_base.${body_suffix}.inner");
              chmod $Config{"File_Mask"}, "$bodydir/$msg_base.${body_suffix}.inner";
              print DATA $data;
              close(DATA);
              $data = $entity->parts(1)->as_string;
              $ret = open(DATA, ">$bodydir/$msg_base.${body_suffix}.insig");
              chmod $Config{"File_Mask"}, "$bodydir/$msg_base.${body_suffix}.insig";
              print DATA $data;
              close(DATA);
              
              # Now we have a body we can check
              my @n_gpg_args = ("--always-trust");
              push (@n_gpg_args, "--keyring", "$gpgring") if  $gpgring;
              push (@n_gpg_args, "--keyring", "$pgpring") if  $pgpring;

              my $n_command_args =
                [ "--verify", 
                  "$bodydir/$msg_base.${body_suffix}.insig",
                  "$bodydir/$msg_base.${body_suffix}.inner"
                ];

              my ( $n_stdout, $n_stderr, $n_status ) = ("", "", "");
              ($n_stdout, $n_stderr, $n_status) =
                invoke_gpg(
                           'Configuration' => $dvt,
                           'GnuPG Args' => \@n_gpg_args,
                           'GnuPG Cmd'  => 'Verify',
                           'Command Args' => $n_command_args
                          );
              # now we read the output
              my @n_output = split /\n/, $n_stdout; # reading the output
              my @n_result = split /\n/, $n_stderr; # reading the error
              my @n_status = split /\n/, $n_status; # read the status info
              my @goodsig=();
              my @n_goodsig=grep {m/GOODSIG/} @n_status;
              if (scalar(@n_goodsig)) {
                my $fingerprint;
                my $date;
                my $timestamp;
                my $radix;
                my $keyid;
                my $username;
                my $subkey;
                for (@n_status) {
                  # Newer GPG versions have extended subkey and expiry data
                  if (m/^\s*\[GNUPG:\]\s+VALIDSIG
                        \s+(\S+)  #  <fingerprint in hex>
                        \s+(\S+)       # <sig_creation_date>
                        \s+(\S+)       # <sig-timestamp>
                        \s+\S+ # <expire-timestamp>
                        \s+\S+ # <sig-version>
                        \s+\S+ # <reserved>
                        \s+\S+ # <pubkey-algo>
                        \s+\S+ # <hash-algo>
                        \s+\S+ # <sig-class>
                        \s+(\S+)       # <primary-key-fpr>
                        \s*$
                       /x) {
                    ($subkey, $date, $timestamp, $fingerprint) = ($1, $2, $3, $4);
                  }
                  elsif (m/^\s*\[GNUPG:\] VALIDSIG\s+(\S+)\s+(\S+)\s+(\S+)/) {
                    ($fingerprint, $date, $timestamp) = ($1, $2, $3);
                  }
                  elsif (m/^\s*\[GNUPG:\] SIG_ID\s+(\S+)\s+(\S+)\s+(\S+)/) {
                    ($radix, $date, $timestamp) = ($1, $2, $3);
                  }
                  elsif (m/^\s*\[GNUPG:\] GOODSIG\s+(\S+)\s+(.+)$/) {
                    ($keyid, $username) = ($1, $2);
                  }
                }
                if (defined $Replay{"$radix"}) {
                  $failed  ="The signature on the message, though valid, has been\n";
                  $failed .= "seen before.  This could be a potential replay attack";
                }
                else {
                  $Replay{"$radix"} = $text;
                  if ($fingerprint =~ /^\s*$/g || $keyid =~ /^\s*$/g) {
                    # Failure.
                    $failed="Failed to find valid keyid in message body";
                  }
                  else {
                    open(GOOD, ">>$checkdir/$msg_base.$msg_suffix") ||
                      die "Could not open $checkdir/$msg_base.$msg_suffix:$!";
                    chmod $Config{"File_Mask"}, "$checkdir/$msg_base.$msg_suffix";
                    print GOOD $fingerprint, "\n";
                    close GOOD;
                    open(SIG, ">>$sigdir/$msg_base.$msg_suffix") ||
                      die "Could not open $checkdir/$msg_base.$msg_suffix:$!";
                    chmod $Config{"File_Mask"}, "$sigdir/$msg_base.$msg_suffix";
                    print SIG $keyid, "\n";
                    close SIG;
                  }
                }
              }
              else {
                $failed = "Failed to find valid signed message in mail body\n$n_status";
              }
            }
            else {
              $failed = "Message not signed.";
            }
          }
          if ($failed) {
            $text  = "There was a problem verifying the signature on the ballot.\n";
            $text .= "FAILURE:\n Reason: $failed\n\n";
            $text .= "The ballot decrypted correctly, but was not signed\n";
            $text .= "So this means that either the ballot was not signed at all\n";
            $text .= "or that it uses RFC 1847 Encapsulation, where the ballot\n";
            $text .= "is first signed as a multipart/signature body, and then\n";
            $text .= "encrypted to form the final multipart/encrypted body --\n";
            $text .= "but something went wrong in verifying the signature.\n";
            $text .= "In either case, the ballot is being rejected.\n";
            $text .= "\n";
            $text .= "-=" x 35;
            $text .= "\n";
            $text .= join "\n", grep { m/^\s*gpg:/ } @result;
            $text .= "\n";
            $text .= join "", @status;
            $text .=  "-=" x 35;
            $text .= "\n\n";
            open(NACK, ">>$nackdir/$msg_base.$msg_suffix") ||
              die "Could not open $nackdir/$msg_base.$msg_suffix:$!";
            chmod $Config{"File_Mask"}, "$nackdir/$msg_base.$msg_suffix";
            print NACK $text;
            print NACK "\tThis ballot is being rejected.\n\n";
            close NACK;
            $dvt->log_message($msg, $text);
          }
        }
        else {
          open(GOOD, ">>$checkdir/$msg_base.$msg_suffix") ||
            die "Could not open $checkdir/$msg_base.$msg_suffix:$!";
          chmod $Config{"File_Mask"}, "$checkdir/$msg_base.$msg_suffix";
          print GOOD $fingerprint, "\n";
          close GOOD;
          open(SIG, ">>$sigdir/$msg_base.$msg_suffix") ||
            die "Could not open $checkdir/$msg_base.$msg_suffix:$!";
          chmod $Config{"File_Mask"}, "$sigdir/$msg_base.$msg_suffix";
          print SIG $keyid, "\n";
          close SIG;
        }
      }
    }
    else {
      # Failure to decrypt
      $text = "There was a problem decrypting the ballot.\n";
      $text   .=  "-=" x 35;
      $text   .= "\n";
      $text   .= join "\n", grep { m/^\s*gpg:/ } @result;
      $text   .= "\n";
      $text   .= "Status:\n";
      $text   .= join "\n", @status;
      $text   .=  "-=" x 35;
      $text   .= "\n\n";

      open(NACK, ">>$nackdir/$msg_base.$msg_suffix") ||
        die "Could not open $nackdir/$msg_base.$msg_suffix:$!";
      chmod $Config{"File_Mask"}, "$nackdir/$msg_base.$msg_suffix";
      print NACK $text;
      print NACK "\tThis ballot is being rejected.\n\n";
      close NACK;
      $dvt->log_message($msg, $text);
    }
  }
}



use Devotee;
sub main {
  my $optdesc = Devotee->Optdesc();
  GetOptions (%$optdesc);
  my $dvt = Devotee->new(%::ConfOpts);
  $dvt->validate(%::ConfOpts) unless
    defined $::ConfOpts{'Config File'} && -r $::ConfOpts{'Config File'};
  $dvt->lock_vote_dir();
  &verify_messages('Configuration' => $dvt);
  $dvt->unlock_vote_dir();
}

&main;

exit 0;


=head1 CAVEATS

This is very inchoate, at the moment, and needs testing.

=cut

=head1 BUGS

None Known so far.

=cut

=head1 AUTHOR

Manoj Srivastava <srivasta@debian.org>

=head1 COPYRIGHT AND LICENSE

This script is a part of the Devotee package, and is 

Copyright (c) 2002 Manoj Srivastava <srivasta@debian.org>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=cut



1;

__END__


