#!/usr/bin/perl -w
#                              -*- Mode: Cperl -*- 
# dvt-publish --- 
# Author           : Manoj Srivastava ( srivasta@glaurung.internal.golden-gryphon.com ) 
# Created On       : Wed Dec 14 21:52:17 2005
# Created On Node  : glaurung.internal.golden-gryphon.com
# Last Modified By : Manoj Srivastava
# Last Modified On : Thu Dec 15 09:33:40 2005
# Last Machine Used: glaurung.internal.golden-gryphon.com
# Update Count     : 5
# Status           : Unknown, Use with caution!
# HISTORY          : 
# Description      : 
#
# arch-tag: 0f0a6968-e337-447a-a74a-3ca9e0508a07

# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 

use strict;

require 5.005;
use Carp qw(carp croak);
use Devotee;
use Getopt::Long;

use MIME::Entity;
use MIME::Parser;
use MIME::Decoder;
use MIME::Tools;
use MIME::Decoder::Binary;

use IO::Handle;
use GnuPG::Interface;
use DB_File;

=head1 NAME

dvt-publish - Given the results, voter logs, and tally sheet, send a signed message

=cut

=head1 SYNOPSIS

dvt-publish -c /path/to/config 

=cut

=head1 DESCRIPTION

This routine is designed to allow publication of the results by
putting together a signed email message and sending it off to the
configured address.

It reads the tally sheet produced by dvt-tally, and the output file
produced by dvr-rslt, and creates a MIME message that has the results
text, the tally sheet, and, if it is a secret ballot, the list of
voters. It then signs the email, and send it to the list of configured
targets.

=cut

=head2 Internal Implementation

=head3 publish

This is the workhorse routine. 
This routine pays attention to the configuration variables
Quorum_File, Tally_File, Max_Choices, and Results.

=cut


sub publish {
  my %params   = @_;
  die "Internal Error!" unless defined $params{'Configuration'};
  my $confref = $params{'Configuration'}->get_config_ref();
  my $dvt = $params{'Configuration'};
  my %Config = %{ $confref };

  my $topdir      = $Config{'Top_Dir'};
  my $tmpdir      = $Config{'Temp_Dir'};

  my $secring     = $Config{'SEC_Keyring'}
    if defined $Config{'SEC_Keyring'};
  my $pubring     = $Config{'PUB_Keyring'}
    if defined $Config{'PUB_Keyring'};


  my $passphrase = $Config{"Pass_Word"} if $Config{"Pass_Word"};

  my $top = MIME::Entity->build(Type    =>"multipart/mixed",
                                From    => "me\@myhost.com",
                                To      => "you\@yourhost.com",
                                Subject => "Hello, nurse!");

           ### Part #1: a simple text document:
           $top->attach(Path=>"./testin/short.txt");
           ### Part #2: a GIF file:
           $top->attach(Path        => "./docs/mime-sm.gif",
                        Type        => "image/gif",
                        Encoding    => "base64");

           ### Part #3: some literal text:
           $top->attach(Data=>$message);
           ### Sign it:
           $top->sign;
           ### Send it:
           open MAIL, "| /usr/lib/sendmail -t -oi -oem" or die "open: $!";
           $top->print(\*MAIL);
           close MAIL;

  my $ret = open(TEXT, "$ackdir/$msg");
  if (!$ret) {
    $dvt->log_message($msg, "Error reading body from $ackdir/$msg:$!");
    next;
  }
  undef $/;
  my $body = <TEXT>;
  close TEXT;
  $/ = "\n";
  if (!$body || $body =~ /^\s*$/) {
    $dvt->log_message($msg, "No body found in  $ackdir/$msg:$!");
    next;
  }

    my $parser = new MIME::Parser;
    $parser->output_dir("$tmpdir");
    $parser->output_to_core(0);
    my $entity;
    eval {$entity = $parser->parse_open("$workdir/$msg"); };
    if ($@) {
      $dvt->log_message($msg, "Could not parse message $msg");
      next;
    }
    my $head        = $entity->head;
    my $from        = $head->get('From');
    my $replyto     = $head->get('Reply-To');

    chomp($from)          if $from;
    chomp($replyto)       if $replyto;
    if ($replyto) {
      $from = $replyto;
    }

  my $subject = "Acknowledgement for your vote";

  my $msg = $params{'Message'};
  # Grab the keyid we stashed away before, while verifying the sig
  if (-r "$sigdir/$msg") {
    my $ret = open(KEYID, "$sigdir/$msg");
    if (!$ret) {
      $dvt->log_message($msg, "Error reading uid from $sigdir/$msg:$!");
      return 0;
    }
  } else {
    $dvt->log_message($msg, "No keyid found in $sigdir / $msg");
    return 0;
  }
  # Slurp in the key
  undef $/;
  my $keyid = <KEYID>;
  close KEYID;
  $/ = "\n";
  chomp $keyid;

  # Setup IO to talk to gpg
  my ( $input,   $output, $error, $status_fh)
    = ( IO::Handle->new(),
        IO::Handle->new(),
        IO::Handle->new(),
        IO::Handle->new()
      );
  my $handles = GnuPG::Handles->new( stdin      => $input,
                                     stdout     => $output,
                                     stderr     => $error,
                                     status     => $status_fh
                                   );

  my $gnupg = GnuPG::Interface->new();

  my @gpg_args = ("--no-default-keyring", "--always-trust");
  push (@gpg_args, "--keyring", "$pubring") if  $pubring;
  push (@gpg_args, "--secret-keyring", "$secring") if  $secring;

  $gnupg->options->hash_init( 'no_options' => 1,
                              'armor'   => 1,
                              'homedir' => $topdir,
                              'recipients' => [ "$destination" ],
                              'meta_interactive' => 0,
                              "verbose" => 1,
                              "always_trust" => 1,
                              'extra_args' => [ @gpg_args ]
                            );
  # indicate our pasphrase through the convience method
  $gnupg->passphrase( $passphrase );

  my $pid = $gnupg->sign( handles => $handles);
  #       my $pid = $gnupg->wrap_call (
  #                 handles => $handles,
  #                       commands     => [ qw( --sign --encrypt ) ]
  #               );

  # this closes the communication channel,
  # indicating we are done
  print $input $params{'Body'};
  close $input;
  
  # now we read the output
  my @output = <$output>;       # reading the output
  my @errors = <$error>;        # reading the error
  my @status = <$status_fh>;    # read the status info
  
  # clean up...
  close $output;
  close $error;
  close $status_fh;

  waitpid $pid, 0;              # clean up the finished GnuPG process

  my $body = join ('', @output) if @output;
  if (! $body) {
    $dvt->log_message($msg, "Error encrypting message.\n@errors\n@status\n");
    return 0;
  }

  # RFC 3156    
  #  4.  OpenPGP encrypted data

  my $text=<<EOH;
From: $params{'Email'}
To: $params{'Destination'}
Reply-To: $params{'Email'}
Bcc: $params{'Email'}
Subject: $params{'Subject'}
Mime-Version: 1.0
Content-Type: multipart/signed; protocol="application/pgp-signature";
        micalg=pgp-sha1; boundary=xx-63ff3786-ec44-48df-ac1c-354c05e07bba-xx


--xx-63ff3786-ec44-48df-ac1c-354c05e07bba-xx
Content-Type: application/pgp-encrypted

Version: 1

--xx-63ff3786-ec44-48df-ac1c-354c05e07bba-xx
Content-Type: application/octet-stream

$body

--xx-63ff3786-ec44-48df-ac1c-354c05e07bba-xx--

EOH
  ;
  open(MAIL, "| /usr/sbin/sendmail -t") || die "Cannot open sendmail";
  # open(MAIL, ">>Acks")                  || die "Cannot open sendmail";
  print MAIL $text;
  close(MAIL);

}

sub main {
  my $optdesc = Devotee->Optdesc();
  GetOptions (%$optdesc);
  my $dvt = Devotee->new(%::ConfOpts);
  $dvt->validate(%::ConfOpts) unless 
    defined $::ConfOpts{'Config File'} && -r $::ConfOpts{'Config File'};
  &publish('Configuration' => $dvt);
}

&main;

exit 0;


=head1 CAVEATS

This is very inchoate, at the moment, and needs testing.

=cut

=head1 BUGS

None Known so far.

=cut

=head1 AUTHOR

Manoj Srivastava <srivasta@debian.org>

=head1 COPYRIGHT AND LICENSE

This script is a part of the Devotee package, and is 

Copyright (c) 2002, 2003, 2004, 2005 Manoj Srivastava <srivasta@debian.org>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=cut



1;

__END__

